// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  categories    Category[]
  transactions  Transaction[]
  budgets       Budget[]
  tags          Tag[]
  transfers     Transfer[]
  notifications Notification[]
  pushSubscriptions PushSubscription[]
  notificationPreferences NotificationPreferences?
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RecurringTransaction RecurringTransaction[]
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  name              String
  type              String
  institution       String? 
  accountNumber     String?
  balance           Float?
  totalLimit        Float?
  color             String?
  isDefault         Boolean @default(false)
  provider          String?
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  transactions      Transaction[]
  transfersFrom     Transfer[]     @relation("TransferFrom")
  transfersTo       Transfer[]     @relation("TransferTo")
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  RecurringTransaction RecurringTransaction[]
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Category {
  id          String         @id @default(cuid())
  name        String
  type        String         // "income" ou "expense"
  color       String?
  icon        String?
  user        User?          @relation(fields: [userId], references: [id])
  userId      String?
  transactions Transaction[]
  budgets     Budget[]

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  RecurringTransaction RecurringTransaction[]
}

model Transaction {
  id            String         @id @default(cuid())
  description   String
  amount        Float
  date          DateTime
  type          String         // "income", "expense", "transfer"
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  account       Account        @relation(fields: [accountId], references: [id])
  accountId     String
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    String
  tags          Tag[]          @relation("TransactionTags")
  attachments   Attachment[]
  recurring     RecurringTransaction? @relation(fields: [recurringId], references: [id])
  recurringId   String?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Budget {
  id          String         @id @default(cuid())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  String
  amount      Float
  month       Int            // 1-12
  year        Int

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@unique([userId, categoryId, month, year])
}

model RecurringTransaction {
  id            String         @id @default(cuid())
  description   String
  amount        Float
  frequency     String         // "monthly", "weekly", "yearly", etc.
  nextRun       DateTime
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  account       Account        @relation(fields: [accountId], references: [id])
  accountId     String
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    String
  transactions  Transaction[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Tag {
  id            String         @id @default(cuid())
  name          String
  color         String?
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  transactions  Transaction[]  @relation("TransactionTags")

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Transfer {
  id            String         @id @default(cuid())
  description   String?
  amount        Float
  date          DateTime
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  fromAccount   Account        @relation("TransferFrom", fields: [fromAccountId], references: [id])
  fromAccountId String
  toAccount     Account        @relation("TransferTo", fields: [toAccountId], references: [id])
  toAccountId   String

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Attachment {
  id            String         @id @default(cuid())
  url           String
  transaction   Transaction    @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        String   // NotificationType enum
  title       String
  message     String
  priority    String   // 'low' | 'medium' | 'high' | 'urgent'
  channels    String   // JSON array of channels
  data        String?  // JSON object with additional data
  read        Boolean  @default(false)
  actionUrl   String?
  actionText  String?
  expiresAt   DateTime?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId, read])
  @@index([userId, createdAt])
}

model PushSubscription {
  id          String   @id @default(cuid())
  userId      String
  endpoint    String
  p256dh      String
  auth        String
  userAgent   String?
  isActive    Boolean  @default(true)
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, endpoint])
}

model NotificationPreferences {
  id              String   @id @default(cuid())
  userId          String   @unique
  enableInApp     Boolean  @default(true)
  enablePush      Boolean  @default(true)
  enableEmail     Boolean  @default(false)
  budgetAlerts    Boolean  @default(true)
  transactionAlerts Boolean @default(true)
  securityAlerts  Boolean  @default(true)
  marketingAlerts Boolean  @default(false)
  quietHours      String?  // JSON object with quiet hours config
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
