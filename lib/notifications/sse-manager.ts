/**
 * Sistema global de gerenciamento de conex√µes SSE
 */

interface SSEConnection {
  write: (data: string) => Promise<void>
  close: () => void
}

// Map global para conex√µes ativas
export const sseConnections = new Map<string, SSEConnection>()

/**
 * Registra uma nova conex√£o SSE
 */
export function registerSSEConnection(userId: string, connection: SSEConnection) {
  sseConnections.set(userId, connection)
  console.log(`‚úÖ [DEBUG] Conex√£o SSE registrada para usu√°rio: ${userId}`)
  console.log(`üìã [DEBUG] Total de conex√µes ativas: ${sseConnections.size}`)
}

/**
 * Remove uma conex√£o SSE
 */
export function unregisterSSEConnection(userId: string) {
  sseConnections.delete(userId)
  console.log(`üõë [DEBUG] Conex√£o SSE removida para usu√°rio: ${userId}`)
  console.log(`üìã [DEBUG] Total de conex√µes ativas: ${sseConnections.size}`)
}

/**
 * Envia notifica√ß√£o via SSE
 */
export async function sendSSENotification(userId: string, notification: any): Promise<boolean> {
  try {
    console.log(`üîÑ [DEBUG] Tentando enviar notifica√ß√£o SSE para usu√°rio: ${userId}`)
    
    const connection = sseConnections.get(userId)
    
    if (!connection) {
      console.warn(`‚ö†Ô∏è [DEBUG] Conex√£o SSE n√£o encontrada para usu√°rio: ${userId}`)
      console.log(`üìã [DEBUG] Conex√µes ativas dispon√≠veis:`, Array.from(sseConnections.keys()))
      return false
    }

    const data = JSON.stringify({
      type: 'notification',
      data: notification,
      timestamp: Date.now()
    })
    
    await connection.write(`data: ${data}\n\n`)
    console.log(`‚úÖ [DEBUG] Notifica√ß√£o SSE enviada com sucesso para usu√°rio: ${userId}`)
    return true
  } catch (error) {
    console.error(`‚ùå [DEBUG] Erro ao enviar notifica√ß√£o SSE:`, error)
    sseConnections.delete(userId)
    return false
  }
}

/**
 * Obt√©m estat√≠sticas das conex√µes SSE
 */
export function getSSEStats() {
  return {
    activeConnections: sseConnections.size,
    userIds: Array.from(sseConnections.keys())
  }
}
